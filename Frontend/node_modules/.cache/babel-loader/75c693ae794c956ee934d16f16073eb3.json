{"ast":null,"code":"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nconst urlAPI = \"http://localhost:8080/Backend_war_exploded/api/\";\nconst urlAuctions = urlAPI + \"allAuctions\";\n\nconst application_json = () => {\n  var ops = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  };\n  return ops;\n};\n\nfunction handleHttpErrors(response) {\n  if (!response.ok) {\n    return Promise.reject({\n      status: response.status,\n      fullError: response.json()\n    });\n  }\n\n  return response.json();\n}\n\nfunction BackendAPI() {\n  var _s = $RefreshSig$();\n\n  const GetAllAuctions = () => {\n    _s();\n\n    const [json, setJson] = useState([]);\n\n    const getData = async () => {\n      const response = await fetch(urlAuctions, application_json);\n      const json = await response.json();\n      console.log(json);\n      setJson(json);\n    };\n\n    useEffect(() => {\n      getData();\n    }, []);\n    return json;\n  };\n\n  _s(GetAllAuctions, \"KgEiuJ81CU/YnleQaiRxTPY4od0=\");\n\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(urlAPI + \"login\", options).then(handleHttpErrors).then(response => {\n      setToken(response.token);\n    });\n  };\n\n  const register = (user, password) => {\n    console.log(user);\n    console.log(password);\n    const options = makeOptions(\"POST\", false, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/register\", options).then(handleHttpErrors);\n  };\n\n  const fetchData = () => {\n    const options = makeOptions(\"GET\", true);\n    return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  const setToken = token => {\n    localStorage.setItem('jwtToken', token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem('jwtToken');\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem('jwtToken');\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    register,\n    logout,\n    fetchData\n  };\n}\n\n_c = BackendAPI;\nconst facade = BackendAPI();\nexport default facade;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackendAPI\");","map":{"version":3,"sources":["C:/Users/Mads T.F. Knudsen/Documents/GitHub/3.Sem-Kode-Eksame/Frontend/src/API/BackendAPI.jsx"],"names":["React","useState","useEffect","urlAPI","urlAuctions","application_json","ops","headers","handleHttpErrors","response","ok","Promise","reject","status","fullError","json","BackendAPI","GetAllAuctions","setJson","getData","fetch","console","log","login","user","password","options","makeOptions","username","then","setToken","token","register","URL","fetchData","method","addToken","body","opts","loggedIn","getToken","JSON","stringify","localStorage","setItem","getItem","logout","removeItem","facade"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst urlAPI = \"http://localhost:8080/Backend_war_exploded/api/\";\r\nconst urlAuctions = urlAPI + \"allAuctions\";\r\n\r\nconst application_json = () => {\r\n    var ops = {\r\n        headers: { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        }\r\n    }\r\n    return ops;\r\n\r\n}\r\n\r\nfunction handleHttpErrors(response) {\r\n    if (!response.ok) {\r\n        return Promise.reject({ status: response.status, fullError: response.json() })\r\n    }\r\n    return response.json();\r\n}\r\n\r\nfunction BackendAPI(){\r\n    const GetAllAuctions = () =>{\r\n        const [json, setJson] = useState([]);\r\n        const getData = async () => {\r\n            const response = await fetch(urlAuctions, application_json);\r\n            const json = await response.json();\r\n            console.log(json);\r\n            setJson(json);\r\n        }\r\n        \r\n        useEffect(() => {\r\n            getData()\r\n        }, [])\r\n\r\n        return json;\r\n    }\r\n    \r\n    const login = (user, password) => {\r\n        const options = makeOptions(\"POST\", true, { username: user, password: password });\r\n        return fetch(urlAPI + \"login\", options)\r\n            .then(handleHttpErrors)\r\n            .then(response => { setToken(response.token) })\r\n    };\r\n    const register = (user, password) => {\r\n        console.log(user);\r\n        console.log(password);\r\n        const options = makeOptions(\"POST\", false, { username: user, password: password });\r\n        return fetch(URL + \"/api/register\", options)\r\n            .then(handleHttpErrors)\r\n    }\r\n    const fetchData = () => {\r\n        const options = makeOptions(\"GET\", true);\r\n        return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\r\n    }\r\n    const makeOptions = (method, addToken, body) => {\r\n        var opts = {\r\n            method: method,\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                'Accept': 'application/json',\r\n            }\r\n        }\r\n        if (addToken && loggedIn()) {\r\n            opts.headers[\"x-access-token\"] = getToken();\r\n        }\r\n        if (body) {\r\n            opts.body = JSON.stringify(body);\r\n        }\r\n        return opts;\r\n    }\r\n    const setToken = (token) => {\r\n        localStorage.setItem('jwtToken', token);\r\n    }\r\n    const getToken = () => {\r\n        return localStorage.getItem('jwtToken');\r\n    }\r\n    const loggedIn = () => {\r\n        const loggedIn = getToken() != null;\r\n        return loggedIn;\r\n    }\r\n    const logout = () => {\r\n        localStorage.removeItem('jwtToken');\r\n    }\r\n    return {\r\n        makeOptions,\r\n        setToken,\r\n        getToken,\r\n        loggedIn,\r\n        login,\r\n        register,\r\n        logout,\r\n        fetchData\r\n    }\r\n}\r\nconst facade = BackendAPI();\r\nexport default facade;"]},"metadata":{},"sourceType":"module"}