{"ast":null,"code":"import { useState, useEffect } from \"react\";\nconst urlAPI = \"http://localhost:8080/Backend_war_exploded/api/\";\nconst urlAuctions = urlAPI + \"Auction\";\n\nconst application_json = () => {\n  var ops = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  };\n  return ops;\n};\n\nfunction handleHttpErrors(response) {\n  if (!response.ok) {\n    return Promise.reject({\n      status: response.status,\n      fullError: response.json()\n    });\n  }\n\n  return response.json();\n}\n\nfunction BackendAPI() {\n  var _s = $RefreshSig$();\n\n  const GetAllAuctions = () => {\n    _s();\n\n    const [json, setJson] = useState([]);\n\n    const getData = async () => {\n      const response = await fetch(urlAuctions, application_json);\n      const json = await response.json();\n      setJson(json);\n    };\n\n    useEffect(() => {\n      getData();\n    }, []);\n    return json;\n  };\n\n  _s(GetAllAuctions, \"KgEiuJ81CU/YnleQaiRxTPY4od0=\");\n\n  const AddAuction = (name, location, time, date) => {\n    const options = makeOptions(\"POST\", true, {\n      name: name,\n      location: location,\n      time: time,\n      date: date\n    });\n    fetch(urlAPI + \"Auction/Add\", options).then(handleHttpErrors);\n  };\n\n  const RemoveAuction = id => {\n    const options = makeOptions(\"POST\", true, {\n      id: id\n    });\n    fetch(urlAPI + \"Auction/Remove\", options).then(handleHttpErrors);\n  };\n\n  const AddBoat = (name, brand, make, year, url) => {\n    const options = makeOptions(\"POST\", true, {\n      name: name,\n      brand: brand,\n      make: make,\n      year: year,\n      url: url\n    });\n    fetch(urlAPI + \"Boat/Add\", options).then(handleHttpErrors);\n  };\n\n  const UpdateBoat = (id, name, brand, make, year, url) => {\n    const options = makeOptions(\"PUT\", true, {\n      id: id,\n      name: name,\n      brand: brand,\n      make: make,\n      year: year,\n      url: url\n    });\n    fetch(urlAPI + \"Boat/Update\", options).then(handleHttpErrors);\n  };\n\n  const UpdateOwner = (boat, owner) => {\n    const options = makeOptions(\"PUT\", true, {\n      boat: boat,\n      owner: owner\n    });\n    fetch(urlAPI + \"Boat/UpdateOwner\", options).then(handleHttpErrors);\n  };\n\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(urlAPI + \"login\", options).then(handleHttpErrors).then(response => {\n      setToken(response.token);\n      return {\n        username: response[\"username\"],\n        role: response[\"role\"]\n      };\n    });\n  };\n\n  const register = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(urlAPI + \"login/New\", options).then(handleHttpErrors);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  const setToken = token => {\n    localStorage.setItem('jwtToken', token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem('jwtToken');\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem('jwtToken');\n  };\n\n  return {\n    GetAllAuctions,\n    AddAuction,\n    RemoveAuction,\n    AddBoat,\n    UpdateBoat,\n    UpdateOwner,\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    register,\n    logout\n  };\n}\n\n_c = BackendAPI;\nconst facade = BackendAPI();\nexport default facade;\n\nvar _c;\n\n$RefreshReg$(_c, \"BackendAPI\");","map":{"version":3,"sources":["C:/Users/Mads T.F. Knudsen/Documents/GitHub/3.Sem-Kode-Eksame/Frontend/src/API/BackendAPI.jsx"],"names":["useState","useEffect","urlAPI","urlAuctions","application_json","ops","headers","handleHttpErrors","response","ok","Promise","reject","status","fullError","json","BackendAPI","GetAllAuctions","setJson","getData","fetch","AddAuction","name","location","time","date","options","makeOptions","then","RemoveAuction","id","AddBoat","brand","make","year","url","UpdateBoat","UpdateOwner","boat","owner","login","user","password","username","setToken","token","role","register","method","addToken","body","opts","loggedIn","getToken","JSON","stringify","localStorage","setItem","getItem","logout","removeItem","facade"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,MAAM,GAAG,iDAAf;AACA,MAAMC,WAAW,GAAGD,MAAM,GAAG,SAA7B;;AAEA,MAAME,gBAAgB,GAAG,MAAM;AAC3B,MAAIC,GAAG,GAAG;AACNC,IAAAA,OAAO,EAAE;AACT,sBAAgB,kBADP;AAET,gBAAU;AAFD;AADH,GAAV;AAMA,SAAOD,GAAP;AAEH,CATD;;AAWA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAChC,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,QAAQ,CAACI,MAAnB;AAA2BC,MAAAA,SAAS,EAAEL,QAAQ,CAACM,IAAT;AAAtC,KAAf,CAAP;AACH;;AACD,SAAON,QAAQ,CAACM,IAAT,EAAP;AACH;;AAED,SAASC,UAAT,GAAqB;AAAA;;AACjB,QAAMC,cAAc,GAAG,MAAK;AAAA;;AACxB,UAAM,CAACF,IAAD,EAAOG,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;;AACA,UAAMkB,OAAO,GAAG,YAAY;AACxB,YAAMV,QAAQ,GAAG,MAAMW,KAAK,CAAChB,WAAD,EAAcC,gBAAd,CAA5B;AACA,YAAMU,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;AACAG,MAAAA,OAAO,CAACH,IAAD,CAAP;AACH,KAJD;;AAMAb,IAAAA,SAAS,CAAC,MAAM;AACZiB,MAAAA,OAAO;AACV,KAFQ,EAEN,EAFM,CAAT;AAIA,WAAOJ,IAAP;AACH,GAbD;;AADiB,KACXE,cADW;;AAgBjB,QAAMI,UAAU,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,IAAjB,EAAuBC,IAAvB,KAAgC;AAC/C,UAAMC,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AAAEL,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,QAAQ,EAAEA,QAAxB;AAAkCC,MAAAA,IAAI,EAAEA,IAAxC;AAA8CC,MAAAA,IAAI,EAAEA;AAApD,KAAf,CAA3B;AACAL,IAAAA,KAAK,CAACjB,MAAM,GAAC,aAAR,EAAuBuB,OAAvB,CAAL,CACCE,IADD,CACMpB,gBADN;AAEH,GAJD;;AAMA,QAAMqB,aAAa,GAAIC,EAAD,IAAO;AACzB,UAAMJ,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AAAEG,MAAAA,EAAE,EAAEA;AAAN,KAAf,CAA3B;AACAV,IAAAA,KAAK,CAACjB,MAAM,GAAC,gBAAR,EAA0BuB,OAA1B,CAAL,CACCE,IADD,CACMpB,gBADN;AAEH,GAJD;;AAMA,QAAMuB,OAAO,GAAG,CAACT,IAAD,EAAOU,KAAP,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,KAAkC;AAC9C,UAAMT,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AAAEL,MAAAA,IAAI,EAAEA,IAAR;AAAcU,MAAAA,KAAK,EAACA,KAApB;AAA2BC,MAAAA,IAAI,EAACA,IAAhC;AAAsCC,MAAAA,IAAI,EAACA,IAA3C;AAAiDC,MAAAA,GAAG,EAAEA;AAAtD,KAAf,CAA3B;AACAf,IAAAA,KAAK,CAACjB,MAAM,GAAC,UAAR,EAAoBuB,OAApB,CAAL,CACCE,IADD,CACMpB,gBADN;AAEH,GAJD;;AAMA,QAAM4B,UAAU,GAAG,CAACN,EAAD,EAAKR,IAAL,EAAWU,KAAX,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,GAA9B,KAAsC;AACrD,UAAMT,OAAO,GAAGC,WAAW,CAAC,KAAD,EAAQ,IAAR,EAAc;AAACG,MAAAA,EAAE,EAACA,EAAJ;AAAQR,MAAAA,IAAI,EAAEA,IAAd;AAAoBU,MAAAA,KAAK,EAACA,KAA1B;AAAiCC,MAAAA,IAAI,EAACA,IAAtC;AAA4CC,MAAAA,IAAI,EAACA,IAAjD;AAAuDC,MAAAA,GAAG,EAAEA;AAA5D,KAAd,CAA3B;AACAf,IAAAA,KAAK,CAACjB,MAAM,GAAC,aAAR,EAAuBuB,OAAvB,CAAL,CACCE,IADD,CACMpB,gBADN;AAEH,GAJD;;AAMA,QAAM6B,WAAW,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,UAAMb,OAAO,GAAGC,WAAW,CAAC,KAAD,EAAQ,IAAR,EAAc;AAACW,MAAAA,IAAI,EAAEA,IAAP;AAAaC,MAAAA,KAAK,EAAEA;AAApB,KAAd,CAA3B;AACAnB,IAAAA,KAAK,CAACjB,MAAM,GAAC,kBAAR,EAA4BuB,OAA5B,CAAL,CACCE,IADD,CACMpB,gBADN;AAEH,GAJD;;AAMA,QAAMgC,KAAK,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC9B,UAAMhB,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AAAEgB,MAAAA,QAAQ,EAAEF,IAAZ;AAAkBC,MAAAA,QAAQ,EAAEA;AAA5B,KAAf,CAA3B;AACA,WAAOtB,KAAK,CAACjB,MAAM,GAAG,OAAV,EAAmBuB,OAAnB,CAAL,CACFE,IADE,CACGpB,gBADH,EAEFoB,IAFE,CAEGnB,QAAQ,IAAI;AAAEmC,MAAAA,QAAQ,CAACnC,QAAQ,CAACoC,KAAV,CAAR;AACpB,aAAO;AACHF,QAAAA,QAAQ,EAAElC,QAAQ,CAAC,UAAD,CADf;AAEHqC,QAAAA,IAAI,EAAErC,QAAQ,CAAC,MAAD;AAFX,OAAP;AAGE,KANC,CAAP;AAOH,GATD;;AAUA,QAAMsC,QAAQ,GAAG,CAACN,IAAD,EAAOC,QAAP,KAAoB;AACjC,UAAMhB,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AAAEgB,MAAAA,QAAQ,EAAEF,IAAZ;AAAkBC,MAAAA,QAAQ,EAAEA;AAA5B,KAAf,CAA3B;AACA,WAAOtB,KAAK,CAACjB,MAAM,GAAG,WAAV,EAAuBuB,OAAvB,CAAL,CACFE,IADE,CACGpB,gBADH,CAAP;AAEH,GAJD;;AAKA,QAAMmB,WAAW,GAAG,CAACqB,MAAD,EAASC,QAAT,EAAmBC,IAAnB,KAA4B;AAC5C,QAAIC,IAAI,GAAG;AACPH,MAAAA,MAAM,EAAEA,MADD;AAEPzC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU;AAFL;AAFF,KAAX;;AAOA,QAAI0C,QAAQ,IAAIG,QAAQ,EAAxB,EAA4B;AACxBD,MAAAA,IAAI,CAAC5C,OAAL,CAAa,gBAAb,IAAiC8C,QAAQ,EAAzC;AACH;;AACD,QAAIH,IAAJ,EAAU;AACNC,MAAAA,IAAI,CAACD,IAAL,GAAYI,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAZ;AACH;;AACD,WAAOC,IAAP;AACH,GAfD;;AAgBA,QAAMP,QAAQ,GAAIC,KAAD,IAAW;AACxBW,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCZ,KAAjC;AACH,GAFD;;AAGA,QAAMQ,QAAQ,GAAG,MAAM;AACnB,WAAOG,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH,GAFD;;AAGA,QAAMN,QAAQ,GAAG,MAAM;AACnB,UAAMA,QAAQ,GAAGC,QAAQ,MAAM,IAA/B;AACA,WAAOD,QAAP;AACH,GAHD;;AAIA,QAAMO,MAAM,GAAG,MAAM;AACjBH,IAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB;AACH,GAFD;;AAGA,SAAO;AACH3C,IAAAA,cADG;AAEHI,IAAAA,UAFG;AAGHQ,IAAAA,aAHG;AAIHE,IAAAA,OAJG;AAKHK,IAAAA,UALG;AAMHC,IAAAA,WANG;AAOHV,IAAAA,WAPG;AAQHiB,IAAAA,QARG;AASHS,IAAAA,QATG;AAUHD,IAAAA,QAVG;AAWHZ,IAAAA,KAXG;AAYHO,IAAAA,QAZG;AAaHY,IAAAA;AAbG,GAAP;AAeH;;KAzGQ3C,U;AA0GT,MAAM6C,MAAM,GAAG7C,UAAU,EAAzB;AACA,eAAe6C,MAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst urlAPI = \"http://localhost:8080/Backend_war_exploded/api/\";\r\nconst urlAuctions = urlAPI + \"Auction\";\r\n\r\nconst application_json = () => {\r\n    var ops = {\r\n        headers: { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        }\r\n    }\r\n    return ops;\r\n\r\n}\r\n\r\nfunction handleHttpErrors(response) {\r\n    if (!response.ok) {\r\n        return Promise.reject({ status: response.status, fullError: response.json() })\r\n    }\r\n    return response.json();\r\n}\r\n\r\nfunction BackendAPI(){\r\n    const GetAllAuctions = () =>{\r\n        const [json, setJson] = useState([]);\r\n        const getData = async () => {\r\n            const response = await fetch(urlAuctions, application_json);\r\n            const json = await response.json();\r\n            setJson(json);\r\n        }\r\n        \r\n        useEffect(() => {\r\n            getData()\r\n        }, [])\r\n\r\n        return json;\r\n    }\r\n\r\n    const AddAuction = (name, location, time, date) => {\r\n        const options = makeOptions(\"POST\", true, { name: name, location: location, time: time, date: date});\r\n        fetch(urlAPI+\"Auction/Add\", options)\r\n        .then(handleHttpErrors)\r\n    }\r\n\r\n    const RemoveAuction = (id) =>{\r\n        const options = makeOptions(\"POST\", true, { id: id});\r\n        fetch(urlAPI+\"Auction/Remove\", options)\r\n        .then(handleHttpErrors)\r\n    }\r\n\r\n    const AddBoat = (name, brand, make, year, url) => {\r\n        const options = makeOptions(\"POST\", true, { name: name, brand:brand, make:make, year:year, url: url});\r\n        fetch(urlAPI+\"Boat/Add\", options)\r\n        .then(handleHttpErrors)\r\n    }\r\n\r\n    const UpdateBoat = (id, name, brand, make, year, url) => {\r\n        const options = makeOptions(\"PUT\", true, {id:id, name: name, brand:brand, make:make, year:year, url: url});\r\n        fetch(urlAPI+\"Boat/Update\", options)\r\n        .then(handleHttpErrors)\r\n    }\r\n\r\n    const UpdateOwner = (boat, owner) => {\r\n        const options = makeOptions(\"PUT\", true, {boat: boat, owner: owner});\r\n        fetch(urlAPI+\"Boat/UpdateOwner\", options)\r\n        .then(handleHttpErrors)\r\n    }\r\n    \r\n    const login = (user, password) => {\r\n        const options = makeOptions(\"POST\", true, { username: user, password: password });\r\n        return fetch(urlAPI + \"login\", options)\r\n            .then(handleHttpErrors)\r\n            .then(response => { setToken(response.token);\r\n            return {\r\n                username: response[\"username\"],\r\n                role: response[\"role\"] \r\n            }})\r\n    };\r\n    const register = (user, password) => {\r\n        const options = makeOptions(\"POST\", true, { username: user, password: password });\r\n        return fetch(urlAPI + \"login/New\", options)\r\n            .then(handleHttpErrors)\r\n    }\r\n    const makeOptions = (method, addToken, body) => {\r\n        var opts = {\r\n            method: method,\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                'Accept': 'application/json',\r\n            }\r\n        }\r\n        if (addToken && loggedIn()) {\r\n            opts.headers[\"x-access-token\"] = getToken();\r\n        }\r\n        if (body) {\r\n            opts.body = JSON.stringify(body);\r\n        }\r\n        return opts;\r\n    }\r\n    const setToken = (token) => {\r\n        localStorage.setItem('jwtToken', token);\r\n    }\r\n    const getToken = () => {\r\n        return localStorage.getItem('jwtToken');\r\n    }\r\n    const loggedIn = () => {\r\n        const loggedIn = getToken() != null;\r\n        return loggedIn;\r\n    }\r\n    const logout = () => {\r\n        localStorage.removeItem('jwtToken');\r\n    }\r\n    return {\r\n        GetAllAuctions,\r\n        AddAuction,\r\n        RemoveAuction,\r\n        AddBoat,\r\n        UpdateBoat,\r\n        UpdateOwner,\r\n        makeOptions,\r\n        setToken,\r\n        getToken,\r\n        loggedIn,\r\n        login,\r\n        register,\r\n        logout\r\n    }\r\n}\r\nconst facade = BackendAPI();\r\nexport default facade;"]},"metadata":{},"sourceType":"module"}